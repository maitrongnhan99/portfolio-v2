name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      checks: write

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.13.1

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test environment
        run: |
          echo "NODE_ENV=test" >> .env.test
          echo "GEMINI_API_KEY=test-api-key" >> .env.test
          echo "MONGODB_CONNECTION_STRING=mongodb://test:test@localhost:27017/test-portfolio?authSource=admin" >> .env.test

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run unit tests with coverage
        run: pnpm test:ci:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: maitrongnhan99/portfolio-v2
          file: ./coverage/lcov.info
          fail_ci_if_error: false

      # Test reporter only runs on push events due to permission limitations on PRs
      - name: Test report
        uses: dorny/test-reporter@v1
        if: github.event_name == 'push' && (success() || failure())
        continue-on-error: true
        with:
          name: Vitest Tests
          path: coverage/junit.xml
          reporter: java-junit

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.13.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          GEMINI_API_KEY: test-build-key
          MONGODB_CONNECTION_STRING: mongodb://localhost:27017/build-test

      - name: Test build output
        run: |
          if [ ! -d ".next" ]; then
            echo "Build output directory not found"
            exit 1
          fi

          if [ ! -f ".next/BUILD_ID" ]; then
            echo "Build ID file not found"
            exit 1
          fi

          echo "Build completed successfully"

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.13.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: |
          # Run npm audit and check for high/critical vulnerabilities
          AUDIT_RESULT=$(pnpm audit --json 2>/dev/null || echo '{"vulnerabilities":{}}')
          HIGH_VULNS=$(echo $AUDIT_RESULT | jq '.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(echo $AUDIT_RESULT | jq '.vulnerabilities.critical // 0')

          if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ Found $HIGH_VULNS high and $CRITICAL_VULNS critical vulnerabilities"
            exit 1
          else
            echo "✅ No high or critical vulnerabilities found"
          fi

  notify:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: always()

    steps:
      - name: Notify on success
        if: needs.test.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success'
        run: |
          echo "✅ All tests passed successfully!"
          echo "- Unit tests: ✅"
          echo "- Integration tests: ✅"
          echo "- Performance tests: ✅"
          echo "- Build: ✅"
          echo "- Security audit: ✅"

      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure'
        run: |
          echo "❌ Some tests failed:"
          echo "- Unit tests: ${{ needs.test.result == 'success' && '✅' || '❌' }}"
          echo "- Build: ${{ needs.build.result == 'success' && '✅' || '❌' }}"
          echo "- Security: ${{ needs.security.result == 'success' && '✅' || '❌' }}"
          exit 1
